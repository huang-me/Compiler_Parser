Terminals unused in grammar

   PRINT
   IF
   ELSE
   FOR


State 75 conflicts: 11 shift/reduce
State 76 conflicts: 11 shift/reduce
State 88 conflicts: 11 shift/reduce
State 90 conflicts: 23 reduce/reduce
State 105 conflicts: 9 shift/reduce
State 106 conflicts: 9 shift/reduce
State 110 conflicts: 11 shift/reduce
State 111 conflicts: 11 shift/reduce
State 112 conflicts: 11 shift/reduce
State 113 conflicts: 11 shift/reduce
State 118 conflicts: 11 shift/reduce
State 119 conflicts: 11 shift/reduce
State 120 conflicts: 11 shift/reduce
State 123 conflicts: 9 shift/reduce
State 134 conflicts: 23 reduce/reduce
State 135 conflicts: 11 shift/reduce
State 136 conflicts: 9 shift/reduce
State 137 conflicts: 9 shift/reduce
State 138 conflicts: 9 shift/reduce
State 139 conflicts: 9 shift/reduce
State 146 conflicts: 9 shift/reduce
State 147 conflicts: 9 shift/reduce
State 148 conflicts: 9 shift/reduce
State 149 conflicts: 2 shift/reduce
State 150 conflicts: 2 shift/reduce
State 159 conflicts: 9 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: stmt stmts
    2        | %empty

    3 stmts: stmt stmts
    4      | %empty

    5 stmt: Def
    6     | NEWLINE
    7     | cal
    8     | print
    9     | block
   10     | setVal

   11 $@1: %empty

   12 setVal: ID '[' INT_LIT $@1 ']' value_initial
   13       | ident assignVal

   14 var: INT_LIT
   15    | FLOAT_LIT
   16    | '"' STRING_LIT '"'
   17    | TRUE
   18    | FALSE

   19 assignVal: '=' var
   20          | ADD_ASSIGN var
   21          | SUB_ASSIGN var
   22          | MUL_ASSIGN var
   23          | QUO_ASSIGN var
   24          | REM_ASSIGN var

   25 ident: ID

   26 value_initial: '=' expr NEWLINE
   27              | %empty

   28 $@2: %empty

   29 block: '{' NEWLINE $@2 stmts '}' NEWLINE

   30 Def: VAR ID INT INT_initial
   31    | VAR ID STRING STR_initial
   32    | VAR ID FLOAT FLOAT_initial
   33    | VAR ID BOOL BOOL_initial

   34 $@3: %empty

   35 Def: VAR ID '[' INT_LIT $@3 ']' typee NEWLINE

   36 typee: INT
   37      | FLOAT

   38 BOOL_initial: '=' TRUE NEWLINE
   39             | '=' FALSE NEWLINE
   40             | NEWLINE

   41 FLOAT_initial: '=' FLOAT_LIT NEWLINE
   42              | NEWLINE

   43 INT_initial: '=' INT_LIT NEWLINE
   44            | NEWLINE

   45 STR_initial: '=' '"' STRING_LIT '"' NEWLINE
   46            | NEWLINE

   47 cal: ID '+' ID NEWLINE
   48    | ID '-' ID NEWLINE
   49    | ID '*' ID NEWLINE
   50    | ID '/' ID NEWLINE
   51    | ID '%' ID NEWLINE
   52    | ID INC NEWLINE
   53    | ID DEC NEWLINE

   54 $@4: %empty

   55 print: PRINTLN $@4 '(' expr ')' NEWLINE

   56 expr: expr '+' preexpr
   57     | expr '-' preexpr
   58     | expr '%' preexpr
   59     | preexpr
   60     | term
   61     | expr compare expr
   62     | andor expr
   63     | '(' expr ')'
   64     | bool
   65     | %empty

   66 preexpr: preexpr '*' preexpr
   67        | preexpr '/' preexpr
   68        | '(' expr ')'
   69        | term

   70 andor: LAND expr
   71      | LOR expr

   72 $@5: %empty

   73 bool: '!' bool $@5 expr
   74     | TRUE
   75     | FALSE

   76 compare: '>' expr
   77        | '<' expr
   78        | GEQ expr
   79        | LEQ expr
   80        | EQL expr
   81        | NEQ expr

   82 term: INT_LIT
   83     | FLOAT_LIT
   84     | SIGN_INT_LIT
   85     | SIGN_FLOAT_LIT

   86 $@6: %empty

   87 term: ID $@6 '[' expr ']'
   88     | ID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 73
'"' (34) 16 45
'%' (37) 51 58
'(' (40) 55 63 68
')' (41) 55 63 68
'*' (42) 49 66
'+' (43) 47 56
'-' (45) 48 57
'/' (47) 50 67
'<' (60) 77
'=' (61) 19 26 38 39 41 43 45
'>' (62) 76
'[' (91) 12 35 87
']' (93) 12 35 87
'{' (123) 29
'}' (125) 29
error (256)
VAR (258) 30 31 32 33 35
INT (259) 30 36
FLOAT (260) 32 37
BOOL (261) 33
STRING (262) 31
INC (263) 52
DEC (264) 53
GEQ (265) 78
LEQ (266) 79
EQL (267) 80
NEQ (268) 81
ADD_ASSIGN (269) 20
SUB_ASSIGN (270) 21
MUL_ASSIGN (271) 22
QUO_ASSIGN (272) 23
REM_ASSIGN (273) 24
LAND (274) 70
LOR (275) 71
NEWLINE (276) 6 26 29 35 38 39 40 41 42 43 44 45 46 47 48 49 50 51
    52 53 55
PRINT (277)
PRINTLN (278) 55
IF (279)
ELSE (280)
FOR (281)
TRUE (282) 17 38 74
FALSE (283) 18 39 75
INT_LIT (284) 12 14 35 43 82
SIGN_INT_LIT (285) 84
FLOAT_LIT (286) 15 41 83
SIGN_FLOAT_LIT (287) 85
STRING_LIT (288) 16 45
ID (289) 12 25 30 31 32 33 35 47 48 49 50 51 52 53 87 88


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
Program (52)
    on left: 1 2, on right: 0
stmts (53)
    on left: 3 4, on right: 1 3 29
stmt (54)
    on left: 5 6 7 8 9 10, on right: 1 3
setVal (55)
    on left: 12 13, on right: 10
$@1 (56)
    on left: 11, on right: 12
var (57)
    on left: 14 15 16 17 18, on right: 19 20 21 22 23 24
assignVal (58)
    on left: 19 20 21 22 23 24, on right: 13
ident (59)
    on left: 25, on right: 13
value_initial (60)
    on left: 26 27, on right: 12
block (61)
    on left: 29, on right: 9
$@2 (62)
    on left: 28, on right: 29
Def (63)
    on left: 30 31 32 33 35, on right: 5
$@3 (64)
    on left: 34, on right: 35
typee (65)
    on left: 36 37, on right: 35
BOOL_initial (66)
    on left: 38 39 40, on right: 33
FLOAT_initial (67)
    on left: 41 42, on right: 32
INT_initial (68)
    on left: 43 44, on right: 30
STR_initial (69)
    on left: 45 46, on right: 31
cal (70)
    on left: 47 48 49 50 51 52 53, on right: 7
print (71)
    on left: 55, on right: 8
$@4 (72)
    on left: 54, on right: 55
expr (73)
    on left: 56 57 58 59 60 61 62 63 64 65, on right: 26 55 56 57 58
    61 62 63 68 70 71 73 76 77 78 79 80 81 87
preexpr (74)
    on left: 66 67 68 69, on right: 56 57 58 59 66 67
andor (75)
    on left: 70 71, on right: 62
bool (76)
    on left: 73 74 75, on right: 64 73
$@5 (77)
    on left: 72, on right: 73
compare (78)
    on left: 76 77 78 79 80 81, on right: 61
term (79)
    on left: 82 83 84 85 87 88, on right: 60 69
$@6 (80)
    on left: 86, on right: 87


State 0

    0 $accept: . Program $end

    VAR      shift, and go to state 1
    NEWLINE  shift, and go to state 2
    PRINTLN  shift, and go to state 3
    ID       shift, and go to state 4
    '{'      shift, and go to state 5

    $default  reduce using rule 2 (Program)

    Program  go to state 6
    stmt     go to state 7
    setVal   go to state 8
    ident    go to state 9
    block    go to state 10
    Def      go to state 11
    cal      go to state 12
    print    go to state 13


State 1

   30 Def: VAR . ID INT INT_initial
   31    | VAR . ID STRING STR_initial
   32    | VAR . ID FLOAT FLOAT_initial
   33    | VAR . ID BOOL BOOL_initial
   35    | VAR . ID '[' INT_LIT $@3 ']' typee NEWLINE

    ID  shift, and go to state 14


State 2

    6 stmt: NEWLINE .

    $default  reduce using rule 6 (stmt)


State 3

   55 print: PRINTLN . $@4 '(' expr ')' NEWLINE

    $default  reduce using rule 54 ($@4)

    $@4  go to state 15


State 4

   12 setVal: ID . '[' INT_LIT $@1 ']' value_initial
   25 ident: ID .
   47 cal: ID . '+' ID NEWLINE
   48    | ID . '-' ID NEWLINE
   49    | ID . '*' ID NEWLINE
   50    | ID . '/' ID NEWLINE
   51    | ID . '%' ID NEWLINE
   52    | ID . INC NEWLINE
   53    | ID . DEC NEWLINE

    INC  shift, and go to state 16
    DEC  shift, and go to state 17
    '['  shift, and go to state 18
    '+'  shift, and go to state 19
    '-'  shift, and go to state 20
    '*'  shift, and go to state 21
    '/'  shift, and go to state 22
    '%'  shift, and go to state 23

    $default  reduce using rule 25 (ident)


State 5

   29 block: '{' . NEWLINE $@2 stmts '}' NEWLINE

    NEWLINE  shift, and go to state 24


State 6

    0 $accept: Program . $end

    $end  shift, and go to state 25


State 7

    1 Program: stmt . stmts

    VAR      shift, and go to state 1
    NEWLINE  shift, and go to state 2
    PRINTLN  shift, and go to state 3
    ID       shift, and go to state 4
    '{'      shift, and go to state 5

    $default  reduce using rule 4 (stmts)

    stmts   go to state 26
    stmt    go to state 27
    setVal  go to state 8
    ident   go to state 9
    block   go to state 10
    Def     go to state 11
    cal     go to state 12
    print   go to state 13


State 8

   10 stmt: setVal .

    $default  reduce using rule 10 (stmt)


State 9

   13 setVal: ident . assignVal

    ADD_ASSIGN  shift, and go to state 28
    SUB_ASSIGN  shift, and go to state 29
    MUL_ASSIGN  shift, and go to state 30
    QUO_ASSIGN  shift, and go to state 31
    REM_ASSIGN  shift, and go to state 32
    '='         shift, and go to state 33

    assignVal  go to state 34


State 10

    9 stmt: block .

    $default  reduce using rule 9 (stmt)


State 11

    5 stmt: Def .

    $default  reduce using rule 5 (stmt)


State 12

    7 stmt: cal .

    $default  reduce using rule 7 (stmt)


State 13

    8 stmt: print .

    $default  reduce using rule 8 (stmt)


State 14

   30 Def: VAR ID . INT INT_initial
   31    | VAR ID . STRING STR_initial
   32    | VAR ID . FLOAT FLOAT_initial
   33    | VAR ID . BOOL BOOL_initial
   35    | VAR ID . '[' INT_LIT $@3 ']' typee NEWLINE

    INT     shift, and go to state 35
    FLOAT   shift, and go to state 36
    BOOL    shift, and go to state 37
    STRING  shift, and go to state 38
    '['     shift, and go to state 39


State 15

   55 print: PRINTLN $@4 . '(' expr ')' NEWLINE

    '('  shift, and go to state 40


State 16

   52 cal: ID INC . NEWLINE

    NEWLINE  shift, and go to state 41


State 17

   53 cal: ID DEC . NEWLINE

    NEWLINE  shift, and go to state 42


State 18

   12 setVal: ID '[' . INT_LIT $@1 ']' value_initial

    INT_LIT  shift, and go to state 43


State 19

   47 cal: ID '+' . ID NEWLINE

    ID  shift, and go to state 44


State 20

   48 cal: ID '-' . ID NEWLINE

    ID  shift, and go to state 45


State 21

   49 cal: ID '*' . ID NEWLINE

    ID  shift, and go to state 46


State 22

   50 cal: ID '/' . ID NEWLINE

    ID  shift, and go to state 47


State 23

   51 cal: ID '%' . ID NEWLINE

    ID  shift, and go to state 48


State 24

   29 block: '{' NEWLINE . $@2 stmts '}' NEWLINE

    $default  reduce using rule 28 ($@2)

    $@2  go to state 49


State 25

    0 $accept: Program $end .

    $default  accept


State 26

    1 Program: stmt stmts .

    $default  reduce using rule 1 (Program)


State 27

    3 stmts: stmt . stmts

    VAR      shift, and go to state 1
    NEWLINE  shift, and go to state 2
    PRINTLN  shift, and go to state 3
    ID       shift, and go to state 4
    '{'      shift, and go to state 5

    $default  reduce using rule 4 (stmts)

    stmts   go to state 50
    stmt    go to state 27
    setVal  go to state 8
    ident   go to state 9
    block   go to state 10
    Def     go to state 11
    cal     go to state 12
    print   go to state 13


State 28

   20 assignVal: ADD_ASSIGN . var

    TRUE       shift, and go to state 51
    FALSE      shift, and go to state 52
    INT_LIT    shift, and go to state 53
    FLOAT_LIT  shift, and go to state 54
    '"'        shift, and go to state 55

    var  go to state 56


State 29

   21 assignVal: SUB_ASSIGN . var

    TRUE       shift, and go to state 51
    FALSE      shift, and go to state 52
    INT_LIT    shift, and go to state 53
    FLOAT_LIT  shift, and go to state 54
    '"'        shift, and go to state 55

    var  go to state 57


State 30

   22 assignVal: MUL_ASSIGN . var

    TRUE       shift, and go to state 51
    FALSE      shift, and go to state 52
    INT_LIT    shift, and go to state 53
    FLOAT_LIT  shift, and go to state 54
    '"'        shift, and go to state 55

    var  go to state 58


State 31

   23 assignVal: QUO_ASSIGN . var

    TRUE       shift, and go to state 51
    FALSE      shift, and go to state 52
    INT_LIT    shift, and go to state 53
    FLOAT_LIT  shift, and go to state 54
    '"'        shift, and go to state 55

    var  go to state 59


State 32

   24 assignVal: REM_ASSIGN . var

    TRUE       shift, and go to state 51
    FALSE      shift, and go to state 52
    INT_LIT    shift, and go to state 53
    FLOAT_LIT  shift, and go to state 54
    '"'        shift, and go to state 55

    var  go to state 60


State 33

   19 assignVal: '=' . var

    TRUE       shift, and go to state 51
    FALSE      shift, and go to state 52
    INT_LIT    shift, and go to state 53
    FLOAT_LIT  shift, and go to state 54
    '"'        shift, and go to state 55

    var  go to state 61


State 34

   13 setVal: ident assignVal .

    $default  reduce using rule 13 (setVal)


State 35

   30 Def: VAR ID INT . INT_initial

    NEWLINE  shift, and go to state 62
    '='      shift, and go to state 63

    INT_initial  go to state 64


State 36

   32 Def: VAR ID FLOAT . FLOAT_initial

    NEWLINE  shift, and go to state 65
    '='      shift, and go to state 66

    FLOAT_initial  go to state 67


State 37

   33 Def: VAR ID BOOL . BOOL_initial

    NEWLINE  shift, and go to state 68
    '='      shift, and go to state 69

    BOOL_initial  go to state 70


State 38

   31 Def: VAR ID STRING . STR_initial

    NEWLINE  shift, and go to state 71
    '='      shift, and go to state 72

    STR_initial  go to state 73


State 39

   35 Def: VAR ID '[' . INT_LIT $@3 ']' typee NEWLINE

    INT_LIT  shift, and go to state 74


State 40

   55 print: PRINTLN $@4 '(' . expr ')' NEWLINE

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    $default  reduce using rule 65 (expr)

    expr     go to state 86
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 41

   52 cal: ID INC NEWLINE .

    $default  reduce using rule 52 (cal)


State 42

   53 cal: ID DEC NEWLINE .

    $default  reduce using rule 53 (cal)


State 43

   12 setVal: ID '[' INT_LIT . $@1 ']' value_initial

    $default  reduce using rule 11 ($@1)

    $@1  go to state 91


State 44

   47 cal: ID '+' ID . NEWLINE

    NEWLINE  shift, and go to state 92


State 45

   48 cal: ID '-' ID . NEWLINE

    NEWLINE  shift, and go to state 93


State 46

   49 cal: ID '*' ID . NEWLINE

    NEWLINE  shift, and go to state 94


State 47

   50 cal: ID '/' ID . NEWLINE

    NEWLINE  shift, and go to state 95


State 48

   51 cal: ID '%' ID . NEWLINE

    NEWLINE  shift, and go to state 96


State 49

   29 block: '{' NEWLINE $@2 . stmts '}' NEWLINE

    VAR      shift, and go to state 1
    NEWLINE  shift, and go to state 2
    PRINTLN  shift, and go to state 3
    ID       shift, and go to state 4
    '{'      shift, and go to state 5

    $default  reduce using rule 4 (stmts)

    stmts   go to state 97
    stmt    go to state 27
    setVal  go to state 8
    ident   go to state 9
    block   go to state 10
    Def     go to state 11
    cal     go to state 12
    print   go to state 13


State 50

    3 stmts: stmt stmts .

    $default  reduce using rule 3 (stmts)


State 51

   17 var: TRUE .

    $default  reduce using rule 17 (var)


State 52

   18 var: FALSE .

    $default  reduce using rule 18 (var)


State 53

   14 var: INT_LIT .

    $default  reduce using rule 14 (var)


State 54

   15 var: FLOAT_LIT .

    $default  reduce using rule 15 (var)


State 55

   16 var: '"' . STRING_LIT '"'

    STRING_LIT  shift, and go to state 98


State 56

   20 assignVal: ADD_ASSIGN var .

    $default  reduce using rule 20 (assignVal)


State 57

   21 assignVal: SUB_ASSIGN var .

    $default  reduce using rule 21 (assignVal)


State 58

   22 assignVal: MUL_ASSIGN var .

    $default  reduce using rule 22 (assignVal)


State 59

   23 assignVal: QUO_ASSIGN var .

    $default  reduce using rule 23 (assignVal)


State 60

   24 assignVal: REM_ASSIGN var .

    $default  reduce using rule 24 (assignVal)


State 61

   19 assignVal: '=' var .

    $default  reduce using rule 19 (assignVal)


State 62

   44 INT_initial: NEWLINE .

    $default  reduce using rule 44 (INT_initial)


State 63

   43 INT_initial: '=' . INT_LIT NEWLINE

    INT_LIT  shift, and go to state 99


State 64

   30 Def: VAR ID INT INT_initial .

    $default  reduce using rule 30 (Def)


State 65

   42 FLOAT_initial: NEWLINE .

    $default  reduce using rule 42 (FLOAT_initial)


State 66

   41 FLOAT_initial: '=' . FLOAT_LIT NEWLINE

    FLOAT_LIT  shift, and go to state 100


State 67

   32 Def: VAR ID FLOAT FLOAT_initial .

    $default  reduce using rule 32 (Def)


State 68

   40 BOOL_initial: NEWLINE .

    $default  reduce using rule 40 (BOOL_initial)


State 69

   38 BOOL_initial: '=' . TRUE NEWLINE
   39             | '=' . FALSE NEWLINE

    TRUE   shift, and go to state 101
    FALSE  shift, and go to state 102


State 70

   33 Def: VAR ID BOOL BOOL_initial .

    $default  reduce using rule 33 (Def)


State 71

   46 STR_initial: NEWLINE .

    $default  reduce using rule 46 (STR_initial)


State 72

   45 STR_initial: '=' . '"' STRING_LIT '"' NEWLINE

    '"'  shift, and go to state 103


State 73

   31 Def: VAR ID STRING STR_initial .

    $default  reduce using rule 31 (Def)


State 74

   35 Def: VAR ID '[' INT_LIT . $@3 ']' typee NEWLINE

    $default  reduce using rule 34 ($@3)

    $@3  go to state 104


State 75

   70 andor: LAND . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 105
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 76

   71 andor: LOR . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 106
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 77

   74 bool: TRUE .

    $default  reduce using rule 74 (bool)


State 78

   75 bool: FALSE .

    $default  reduce using rule 75 (bool)


State 79

   82 term: INT_LIT .

    $default  reduce using rule 82 (term)


State 80

   84 term: SIGN_INT_LIT .

    $default  reduce using rule 84 (term)


State 81

   83 term: FLOAT_LIT .

    $default  reduce using rule 83 (term)


State 82

   85 term: SIGN_FLOAT_LIT .

    $default  reduce using rule 85 (term)


State 83

   87 term: ID . $@6 '[' expr ']'
   88     | ID .

    '['       reduce using rule 86 ($@6)
    $default  reduce using rule 88 (term)

    $@6  go to state 107


State 84

   63 expr: '(' . expr ')'
   68 preexpr: '(' . expr ')'

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    $default  reduce using rule 65 (expr)

    expr     go to state 108
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 85

   73 bool: '!' . bool $@5 expr

    TRUE   shift, and go to state 77
    FALSE  shift, and go to state 78
    '!'    shift, and go to state 85

    bool  go to state 109


State 86

   55 print: PRINTLN $@4 '(' expr . ')' NEWLINE
   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    ')'  shift, and go to state 117
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    compare  go to state 120


State 87

   59 expr: preexpr .
   66 preexpr: preexpr . '*' preexpr
   67        | preexpr . '/' preexpr

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122

    $default  reduce using rule 59 (expr)


State 88

   62 expr: andor . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 123
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 89

   64 expr: bool .

    $default  reduce using rule 64 (expr)


State 90

   60 expr: term .
   69 preexpr: term .

    GEQ             reduce using rule 60 (expr)
    GEQ             [reduce using rule 69 (preexpr)]
    LEQ             reduce using rule 60 (expr)
    LEQ             [reduce using rule 69 (preexpr)]
    EQL             reduce using rule 60 (expr)
    EQL             [reduce using rule 69 (preexpr)]
    NEQ             reduce using rule 60 (expr)
    NEQ             [reduce using rule 69 (preexpr)]
    LAND            reduce using rule 60 (expr)
    LAND            [reduce using rule 69 (preexpr)]
    LOR             reduce using rule 60 (expr)
    LOR             [reduce using rule 69 (preexpr)]
    NEWLINE         reduce using rule 60 (expr)
    NEWLINE         [reduce using rule 69 (preexpr)]
    TRUE            reduce using rule 60 (expr)
    TRUE            [reduce using rule 69 (preexpr)]
    FALSE           reduce using rule 60 (expr)
    FALSE           [reduce using rule 69 (preexpr)]
    INT_LIT         reduce using rule 60 (expr)
    INT_LIT         [reduce using rule 69 (preexpr)]
    SIGN_INT_LIT    reduce using rule 60 (expr)
    SIGN_INT_LIT    [reduce using rule 69 (preexpr)]
    FLOAT_LIT       reduce using rule 60 (expr)
    FLOAT_LIT       [reduce using rule 69 (preexpr)]
    SIGN_FLOAT_LIT  reduce using rule 60 (expr)
    SIGN_FLOAT_LIT  [reduce using rule 69 (preexpr)]
    ID              reduce using rule 60 (expr)
    ID              [reduce using rule 69 (preexpr)]
    ']'             reduce using rule 60 (expr)
    ']'             [reduce using rule 69 (preexpr)]
    '+'             reduce using rule 60 (expr)
    '+'             [reduce using rule 69 (preexpr)]
    '-'             reduce using rule 60 (expr)
    '-'             [reduce using rule 69 (preexpr)]
    '*'             reduce using rule 69 (preexpr)
    '/'             reduce using rule 69 (preexpr)
    '%'             reduce using rule 60 (expr)
    '%'             [reduce using rule 69 (preexpr)]
    '('             reduce using rule 60 (expr)
    '('             [reduce using rule 69 (preexpr)]
    ')'             reduce using rule 60 (expr)
    ')'             [reduce using rule 69 (preexpr)]
    '!'             reduce using rule 60 (expr)
    '!'             [reduce using rule 69 (preexpr)]
    '>'             reduce using rule 60 (expr)
    '>'             [reduce using rule 69 (preexpr)]
    '<'             reduce using rule 60 (expr)
    '<'             [reduce using rule 69 (preexpr)]
    $default        reduce using rule 60 (expr)


State 91

   12 setVal: ID '[' INT_LIT $@1 . ']' value_initial

    ']'  shift, and go to state 124


State 92

   47 cal: ID '+' ID NEWLINE .

    $default  reduce using rule 47 (cal)


State 93

   48 cal: ID '-' ID NEWLINE .

    $default  reduce using rule 48 (cal)


State 94

   49 cal: ID '*' ID NEWLINE .

    $default  reduce using rule 49 (cal)


State 95

   50 cal: ID '/' ID NEWLINE .

    $default  reduce using rule 50 (cal)


State 96

   51 cal: ID '%' ID NEWLINE .

    $default  reduce using rule 51 (cal)


State 97

   29 block: '{' NEWLINE $@2 stmts . '}' NEWLINE

    '}'  shift, and go to state 125


State 98

   16 var: '"' STRING_LIT . '"'

    '"'  shift, and go to state 126


State 99

   43 INT_initial: '=' INT_LIT . NEWLINE

    NEWLINE  shift, and go to state 127


State 100

   41 FLOAT_initial: '=' FLOAT_LIT . NEWLINE

    NEWLINE  shift, and go to state 128


State 101

   38 BOOL_initial: '=' TRUE . NEWLINE

    NEWLINE  shift, and go to state 129


State 102

   39 BOOL_initial: '=' FALSE . NEWLINE

    NEWLINE  shift, and go to state 130


State 103

   45 STR_initial: '=' '"' . STRING_LIT '"' NEWLINE

    STRING_LIT  shift, and go to state 131


State 104

   35 Def: VAR ID '[' INT_LIT $@3 . ']' typee NEWLINE

    ']'  shift, and go to state 132


State 105

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   70 andor: LAND expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 70 (andor)]
    LEQ       [reduce using rule 70 (andor)]
    EQL       [reduce using rule 70 (andor)]
    NEQ       [reduce using rule 70 (andor)]
    '+'       [reduce using rule 70 (andor)]
    '-'       [reduce using rule 70 (andor)]
    '%'       [reduce using rule 70 (andor)]
    '>'       [reduce using rule 70 (andor)]
    '<'       [reduce using rule 70 (andor)]
    $default  reduce using rule 70 (andor)

    compare  go to state 120


State 106

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   71 andor: LOR expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 71 (andor)]
    LEQ       [reduce using rule 71 (andor)]
    EQL       [reduce using rule 71 (andor)]
    NEQ       [reduce using rule 71 (andor)]
    '+'       [reduce using rule 71 (andor)]
    '-'       [reduce using rule 71 (andor)]
    '%'       [reduce using rule 71 (andor)]
    '>'       [reduce using rule 71 (andor)]
    '<'       [reduce using rule 71 (andor)]
    $default  reduce using rule 71 (andor)

    compare  go to state 120


State 107

   87 term: ID $@6 . '[' expr ']'

    '['  shift, and go to state 133


State 108

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   63     | '(' expr . ')'
   68 preexpr: '(' expr . ')'

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    ')'  shift, and go to state 134
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    compare  go to state 120


State 109

   73 bool: '!' bool . $@5 expr

    $default  reduce using rule 72 ($@5)

    $@5  go to state 135


State 110

   78 compare: GEQ . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 136
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 111

   79 compare: LEQ . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 137
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 112

   80 compare: EQL . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 138
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 113

   81 compare: NEQ . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 139
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 114

   56 expr: expr '+' . preexpr

    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 140

    preexpr  go to state 141
    term     go to state 142


State 115

   57 expr: expr '-' . preexpr

    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 140

    preexpr  go to state 143
    term     go to state 142


State 116

   58 expr: expr '%' . preexpr

    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 140

    preexpr  go to state 144
    term     go to state 142


State 117

   55 print: PRINTLN $@4 '(' expr ')' . NEWLINE

    NEWLINE  shift, and go to state 145


State 118

   76 compare: '>' . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 146
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 119

   77 compare: '<' . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 147
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 120

   61 expr: expr compare . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 148
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 121

   66 preexpr: preexpr '*' . preexpr

    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 140

    preexpr  go to state 149
    term     go to state 142


State 122

   67 preexpr: preexpr '/' . preexpr

    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 140

    preexpr  go to state 150
    term     go to state 142


State 123

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   62     | andor expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 62 (expr)]
    LEQ       [reduce using rule 62 (expr)]
    EQL       [reduce using rule 62 (expr)]
    NEQ       [reduce using rule 62 (expr)]
    '+'       [reduce using rule 62 (expr)]
    '-'       [reduce using rule 62 (expr)]
    '%'       [reduce using rule 62 (expr)]
    '>'       [reduce using rule 62 (expr)]
    '<'       [reduce using rule 62 (expr)]
    $default  reduce using rule 62 (expr)

    compare  go to state 120


State 124

   12 setVal: ID '[' INT_LIT $@1 ']' . value_initial

    '='  shift, and go to state 151

    $default  reduce using rule 27 (value_initial)

    value_initial  go to state 152


State 125

   29 block: '{' NEWLINE $@2 stmts '}' . NEWLINE

    NEWLINE  shift, and go to state 153


State 126

   16 var: '"' STRING_LIT '"' .

    $default  reduce using rule 16 (var)


State 127

   43 INT_initial: '=' INT_LIT NEWLINE .

    $default  reduce using rule 43 (INT_initial)


State 128

   41 FLOAT_initial: '=' FLOAT_LIT NEWLINE .

    $default  reduce using rule 41 (FLOAT_initial)


State 129

   38 BOOL_initial: '=' TRUE NEWLINE .

    $default  reduce using rule 38 (BOOL_initial)


State 130

   39 BOOL_initial: '=' FALSE NEWLINE .

    $default  reduce using rule 39 (BOOL_initial)


State 131

   45 STR_initial: '=' '"' STRING_LIT . '"' NEWLINE

    '"'  shift, and go to state 154


State 132

   35 Def: VAR ID '[' INT_LIT $@3 ']' . typee NEWLINE

    INT    shift, and go to state 155
    FLOAT  shift, and go to state 156

    typee  go to state 157


State 133

   87 term: ID $@6 '[' . expr ']'

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    $default  reduce using rule 65 (expr)

    expr     go to state 158
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 134

   63 expr: '(' expr ')' .
   68 preexpr: '(' expr ')' .

    GEQ             reduce using rule 63 (expr)
    GEQ             [reduce using rule 68 (preexpr)]
    LEQ             reduce using rule 63 (expr)
    LEQ             [reduce using rule 68 (preexpr)]
    EQL             reduce using rule 63 (expr)
    EQL             [reduce using rule 68 (preexpr)]
    NEQ             reduce using rule 63 (expr)
    NEQ             [reduce using rule 68 (preexpr)]
    LAND            reduce using rule 63 (expr)
    LAND            [reduce using rule 68 (preexpr)]
    LOR             reduce using rule 63 (expr)
    LOR             [reduce using rule 68 (preexpr)]
    NEWLINE         reduce using rule 63 (expr)
    NEWLINE         [reduce using rule 68 (preexpr)]
    TRUE            reduce using rule 63 (expr)
    TRUE            [reduce using rule 68 (preexpr)]
    FALSE           reduce using rule 63 (expr)
    FALSE           [reduce using rule 68 (preexpr)]
    INT_LIT         reduce using rule 63 (expr)
    INT_LIT         [reduce using rule 68 (preexpr)]
    SIGN_INT_LIT    reduce using rule 63 (expr)
    SIGN_INT_LIT    [reduce using rule 68 (preexpr)]
    FLOAT_LIT       reduce using rule 63 (expr)
    FLOAT_LIT       [reduce using rule 68 (preexpr)]
    SIGN_FLOAT_LIT  reduce using rule 63 (expr)
    SIGN_FLOAT_LIT  [reduce using rule 68 (preexpr)]
    ID              reduce using rule 63 (expr)
    ID              [reduce using rule 68 (preexpr)]
    ']'             reduce using rule 63 (expr)
    ']'             [reduce using rule 68 (preexpr)]
    '+'             reduce using rule 63 (expr)
    '+'             [reduce using rule 68 (preexpr)]
    '-'             reduce using rule 63 (expr)
    '-'             [reduce using rule 68 (preexpr)]
    '*'             reduce using rule 68 (preexpr)
    '/'             reduce using rule 68 (preexpr)
    '%'             reduce using rule 63 (expr)
    '%'             [reduce using rule 68 (preexpr)]
    '('             reduce using rule 63 (expr)
    '('             [reduce using rule 68 (preexpr)]
    ')'             reduce using rule 63 (expr)
    ')'             [reduce using rule 68 (preexpr)]
    '!'             reduce using rule 63 (expr)
    '!'             [reduce using rule 68 (preexpr)]
    '>'             reduce using rule 63 (expr)
    '>'             [reduce using rule 68 (preexpr)]
    '<'             reduce using rule 63 (expr)
    '<'             [reduce using rule 68 (preexpr)]
    $default        reduce using rule 63 (expr)


State 135

   73 bool: '!' bool $@5 . expr

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    LAND            [reduce using rule 65 (expr)]
    LOR             [reduce using rule 65 (expr)]
    TRUE            [reduce using rule 65 (expr)]
    FALSE           [reduce using rule 65 (expr)]
    INT_LIT         [reduce using rule 65 (expr)]
    SIGN_INT_LIT    [reduce using rule 65 (expr)]
    FLOAT_LIT       [reduce using rule 65 (expr)]
    SIGN_FLOAT_LIT  [reduce using rule 65 (expr)]
    ID              [reduce using rule 65 (expr)]
    '('             [reduce using rule 65 (expr)]
    '!'             [reduce using rule 65 (expr)]
    $default        reduce using rule 65 (expr)

    expr     go to state 159
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 136

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   78 compare: GEQ expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 78 (compare)]
    LEQ       [reduce using rule 78 (compare)]
    EQL       [reduce using rule 78 (compare)]
    NEQ       [reduce using rule 78 (compare)]
    '+'       [reduce using rule 78 (compare)]
    '-'       [reduce using rule 78 (compare)]
    '%'       [reduce using rule 78 (compare)]
    '>'       [reduce using rule 78 (compare)]
    '<'       [reduce using rule 78 (compare)]
    $default  reduce using rule 78 (compare)

    compare  go to state 120


State 137

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   79 compare: LEQ expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 79 (compare)]
    LEQ       [reduce using rule 79 (compare)]
    EQL       [reduce using rule 79 (compare)]
    NEQ       [reduce using rule 79 (compare)]
    '+'       [reduce using rule 79 (compare)]
    '-'       [reduce using rule 79 (compare)]
    '%'       [reduce using rule 79 (compare)]
    '>'       [reduce using rule 79 (compare)]
    '<'       [reduce using rule 79 (compare)]
    $default  reduce using rule 79 (compare)

    compare  go to state 120


State 138

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   80 compare: EQL expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 80 (compare)]
    LEQ       [reduce using rule 80 (compare)]
    EQL       [reduce using rule 80 (compare)]
    NEQ       [reduce using rule 80 (compare)]
    '+'       [reduce using rule 80 (compare)]
    '-'       [reduce using rule 80 (compare)]
    '%'       [reduce using rule 80 (compare)]
    '>'       [reduce using rule 80 (compare)]
    '<'       [reduce using rule 80 (compare)]
    $default  reduce using rule 80 (compare)

    compare  go to state 120


State 139

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   81 compare: NEQ expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 81 (compare)]
    LEQ       [reduce using rule 81 (compare)]
    EQL       [reduce using rule 81 (compare)]
    NEQ       [reduce using rule 81 (compare)]
    '+'       [reduce using rule 81 (compare)]
    '-'       [reduce using rule 81 (compare)]
    '%'       [reduce using rule 81 (compare)]
    '>'       [reduce using rule 81 (compare)]
    '<'       [reduce using rule 81 (compare)]
    $default  reduce using rule 81 (compare)

    compare  go to state 120


State 140

   68 preexpr: '(' . expr ')'

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    $default  reduce using rule 65 (expr)

    expr     go to state 160
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 141

   56 expr: expr '+' preexpr .
   66 preexpr: preexpr . '*' preexpr
   67        | preexpr . '/' preexpr

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122

    $default  reduce using rule 56 (expr)


State 142

   69 preexpr: term .

    $default  reduce using rule 69 (preexpr)


State 143

   57 expr: expr '-' preexpr .
   66 preexpr: preexpr . '*' preexpr
   67        | preexpr . '/' preexpr

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122

    $default  reduce using rule 57 (expr)


State 144

   58 expr: expr '%' preexpr .
   66 preexpr: preexpr . '*' preexpr
   67        | preexpr . '/' preexpr

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122

    $default  reduce using rule 58 (expr)


State 145

   55 print: PRINTLN $@4 '(' expr ')' NEWLINE .

    $default  reduce using rule 55 (print)


State 146

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   76 compare: '>' expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 76 (compare)]
    LEQ       [reduce using rule 76 (compare)]
    EQL       [reduce using rule 76 (compare)]
    NEQ       [reduce using rule 76 (compare)]
    '+'       [reduce using rule 76 (compare)]
    '-'       [reduce using rule 76 (compare)]
    '%'       [reduce using rule 76 (compare)]
    '>'       [reduce using rule 76 (compare)]
    '<'       [reduce using rule 76 (compare)]
    $default  reduce using rule 76 (compare)

    compare  go to state 120


State 147

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   77 compare: '<' expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 77 (compare)]
    LEQ       [reduce using rule 77 (compare)]
    EQL       [reduce using rule 77 (compare)]
    NEQ       [reduce using rule 77 (compare)]
    '+'       [reduce using rule 77 (compare)]
    '-'       [reduce using rule 77 (compare)]
    '%'       [reduce using rule 77 (compare)]
    '>'       [reduce using rule 77 (compare)]
    '<'       [reduce using rule 77 (compare)]
    $default  reduce using rule 77 (compare)

    compare  go to state 120


State 148

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   61     | expr compare expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 61 (expr)]
    LEQ       [reduce using rule 61 (expr)]
    EQL       [reduce using rule 61 (expr)]
    NEQ       [reduce using rule 61 (expr)]
    '+'       [reduce using rule 61 (expr)]
    '-'       [reduce using rule 61 (expr)]
    '%'       [reduce using rule 61 (expr)]
    '>'       [reduce using rule 61 (expr)]
    '<'       [reduce using rule 61 (expr)]
    $default  reduce using rule 61 (expr)

    compare  go to state 120


State 149

   66 preexpr: preexpr . '*' preexpr
   66        | preexpr '*' preexpr .
   67        | preexpr . '/' preexpr

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122

    '*'       [reduce using rule 66 (preexpr)]
    '/'       [reduce using rule 66 (preexpr)]
    $default  reduce using rule 66 (preexpr)


State 150

   66 preexpr: preexpr . '*' preexpr
   67        | preexpr . '/' preexpr
   67        | preexpr '/' preexpr .

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122

    '*'       [reduce using rule 67 (preexpr)]
    '/'       [reduce using rule 67 (preexpr)]
    $default  reduce using rule 67 (preexpr)


State 151

   26 value_initial: '=' . expr NEWLINE

    LAND            shift, and go to state 75
    LOR             shift, and go to state 76
    TRUE            shift, and go to state 77
    FALSE           shift, and go to state 78
    INT_LIT         shift, and go to state 79
    SIGN_INT_LIT    shift, and go to state 80
    FLOAT_LIT       shift, and go to state 81
    SIGN_FLOAT_LIT  shift, and go to state 82
    ID              shift, and go to state 83
    '('             shift, and go to state 84
    '!'             shift, and go to state 85

    $default  reduce using rule 65 (expr)

    expr     go to state 161
    preexpr  go to state 87
    andor    go to state 88
    bool     go to state 89
    term     go to state 90


State 152

   12 setVal: ID '[' INT_LIT $@1 ']' value_initial .

    $default  reduce using rule 12 (setVal)


State 153

   29 block: '{' NEWLINE $@2 stmts '}' NEWLINE .

    $default  reduce using rule 29 (block)


State 154

   45 STR_initial: '=' '"' STRING_LIT '"' . NEWLINE

    NEWLINE  shift, and go to state 162


State 155

   36 typee: INT .

    $default  reduce using rule 36 (typee)


State 156

   37 typee: FLOAT .

    $default  reduce using rule 37 (typee)


State 157

   35 Def: VAR ID '[' INT_LIT $@3 ']' typee . NEWLINE

    NEWLINE  shift, and go to state 163


State 158

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   87 term: ID $@6 '[' expr . ']'

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    ']'  shift, and go to state 164
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    compare  go to state 120


State 159

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   73 bool: '!' bool $@5 expr .

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    GEQ       [reduce using rule 73 (bool)]
    LEQ       [reduce using rule 73 (bool)]
    EQL       [reduce using rule 73 (bool)]
    NEQ       [reduce using rule 73 (bool)]
    '+'       [reduce using rule 73 (bool)]
    '-'       [reduce using rule 73 (bool)]
    '%'       [reduce using rule 73 (bool)]
    '>'       [reduce using rule 73 (bool)]
    '<'       [reduce using rule 73 (bool)]
    $default  reduce using rule 73 (bool)

    compare  go to state 120


State 160

   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr
   68 preexpr: '(' expr . ')'

    GEQ  shift, and go to state 110
    LEQ  shift, and go to state 111
    EQL  shift, and go to state 112
    NEQ  shift, and go to state 113
    '+'  shift, and go to state 114
    '-'  shift, and go to state 115
    '%'  shift, and go to state 116
    ')'  shift, and go to state 165
    '>'  shift, and go to state 118
    '<'  shift, and go to state 119

    compare  go to state 120


State 161

   26 value_initial: '=' expr . NEWLINE
   56 expr: expr . '+' preexpr
   57     | expr . '-' preexpr
   58     | expr . '%' preexpr
   61     | expr . compare expr

    GEQ      shift, and go to state 110
    LEQ      shift, and go to state 111
    EQL      shift, and go to state 112
    NEQ      shift, and go to state 113
    NEWLINE  shift, and go to state 166
    '+'      shift, and go to state 114
    '-'      shift, and go to state 115
    '%'      shift, and go to state 116
    '>'      shift, and go to state 118
    '<'      shift, and go to state 119

    compare  go to state 120


State 162

   45 STR_initial: '=' '"' STRING_LIT '"' NEWLINE .

    $default  reduce using rule 45 (STR_initial)


State 163

   35 Def: VAR ID '[' INT_LIT $@3 ']' typee NEWLINE .

    $default  reduce using rule 35 (Def)


State 164

   87 term: ID $@6 '[' expr ']' .

    $default  reduce using rule 87 (term)


State 165

   68 preexpr: '(' expr ')' .

    $default  reduce using rule 68 (preexpr)


State 166

   26 value_initial: '=' expr NEWLINE .

    $default  reduce using rule 26 (value_initial)
